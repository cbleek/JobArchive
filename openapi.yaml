openapi: 3.0.0
info:
  title: Job Archive
  description: |
    ## API for an archive of job postings.
    Job postings on the Internet contain wonderful data. Unfortunately, the data disappears after the runtime of a job posting.  But you can learn a lot from the data of job advertisements. Digital change will change the way we work together. So it would be great if you could use job postings to see how the demands on applicants are changing. Or in which direction the qualification requirements are going. And not just in the local area, but globally.  Large companies get this data, evaluate it and then offer results via API. But the data itself remains hidden for third-party evaluations. There are many tools for evaluating data. The know-how on how to use these tools is there. And the infrastructure to store large amounts of data is also there. This API should help to collect these Data.
  version: 0.0.1
  contact:
    name: API Support
    email: contact@yawik.org
    url: 'https://github.com/cbleek/JobArchive'
  x-logo:
    url: 'https://github.com/cross-solution/YAWIK/blob/develop/module/Core/public/images/logo.jpg'
    altText: Yawik logo
  license:
    name: MIT
    url: 'https://github.com/cbleek/JobArchive/blob/master/LICENSE'
servers:
  - url: 'https://api.yawik.org'
    description: Endpoint of the job archive api
  - url: 'http://localhost:8000'
    description: Test in localserver
tags:
  - name: auth
    description: Operations about auth
  - name: user
    description: Operations about user
  - name: job
    description: Operations about job
  - name: perm
    description: Operations about permissions
security:
  - bearerAuth: []
paths:
  /signup:
    post:
      tags:
        - auth
      summary: Create user
      description: 'User be able to sign up with username, password, email. After sign up backend will send token to email.'
      operationId: signupuser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: test
              email: test@test.com
              password: test
        required: true
      responses:
        '200':
          description: New user successfully created.
        default:
          description: The eamil is using by someone else.
      security: []
  /signin:
    post:
      tags:
        - auth
      summary: Sign in with email and password
      description: 'Signin creates a User Session. User be able to sign into the system and server will respond access-token, and this access-token should be stored in session. This access-token will be used to use other api. Backend will identify user using access-token.'
      operationId: signin
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequest'
            example:
              email: test@test.com
              password: test
        required: true
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
                example: Bearer 35775k6dehgn678865k87k748o233
            application/json:
              schema:
                type: string
                example: Bearer 35775k6dehgn678865k87k748o233
        '400':
          description: Invalid email/password supplied
        '404':
          description: User not found
        '422':
          description: email/password not supplied
      security: []
  /logout:
    post:
      tags:
        - auth
      summary: Logs out current logged in user
      description: Destoys a User Session.
      operationId: logoutUser
      responses:
        '200':
          description: User successfully log out.
        default:
          $ref: '#/components/responses/Unauthorized'
  /validateemail:
    get:
      tags:
        - auth
      summary: Confirm user's email address
      operationId: confirmemail
      parameters:
        - in: query
          name: token
          description: this token is from backend after sign up
          required: true
          schema:
            type: string
          example: awevbbrntye2y53n5467xcvbn35u7mu3456
      responses:
        '200':
          description: Email address has been confirmed.
        default:
          description: Something went wrong
      security: []
  /api/user:
    get:
      tags:
        - user
      summary: Gets a user by ID.
      description: |
        A detailed description of the operation. Use markdown for rich text representation, such as **bold**, *italic*, and [links](https://swagger.io).
      operationId: getuser
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                username: test
                email: test@test.com
                password: test
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
              example:
                username: test
                email: test@test.com
                password: test
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      tags:
        - user
      summary: Update user profile
      description: An authenticated user be able to update information.
      operationId: updateuser
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: test
              email: test@test.com
              password: test
        required: true
      responses:
        '200':
          description: User data successfully updated.
        default:
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - user
      summary: Delete user
      description: User be able to delete profile.
      operationId: deleteUser
      responses:
        '200':
          description: Your profile deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/addjoblink:
    post:
      tags:
        - job
      summary: Post a link
      description: An authenticated user be able to post a link
      operationId: addjoblink
      requestBody:
        description: Job url
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
            example:
              url: 'http://example/job1'
        required: true
      responses:
        '200':
          description: Job link added successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/listlinks:
    get:
      tags:
        - job
      summary: Get Job lists
      description: An authenticated user be able to retrieve joblinks
      operationId: getjoblinks
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum:
              - all
              - mine
            example: all
          description: if type='all' user be able to retrieve all jobads but not 'all' user will retrieve his own posted jobads
      responses:
        '200':
          description: gets a list of job postings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
              example:
                joblinks:
                  - 'http://example/job1'
                  - 'http://example/job2'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/job:
    get:
      tags:
        - job
      summary: get a job posting
      description: get details of a job posting
      parameters:
        - in: query
          name: id
          schema:
            type: string
            example: myReference-234
      responses:
        '200':
          description: gets detail of a job posting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: job posting was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '410':
          description: 'job posting was found, but the posting was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 100
        emailVerified:
          type: boolean
          nullable: true
      xml:
        name: User
    Job:
      type: object
      properties:
        url:
          type: string
          format: uri
          description: An url of an avtive job posting which can be downloaded.
        title:
          type: string
          readOnly: true
          nullable: true
          description: 'optional The title of the job (not the title of the posting). For example, "Software Engineer" or "Barista". For example.'
        datePosted:
          type: string
          readOnly: true
          nullable: true
          format: date-time
          description: optional start date of a job posting.
        validThrough:
          type: string
          nullable: true
          format: date-time
          description: optional end date of a job posting.
        description:
          type: string
          nullable: true
          readOnly: true
          description: optional description of a job posting.
        employmentType:
          type: array
          nullable: true
          readOnly: true
          items:
            type: string
            enum:
              - FULL_TIME
              - PART_TIME
              - CONTRACTOR
              - TEMPORARY
              - INTERN
              - VOLUNTEER
              - PER_DIEM
              - OTHER
          description: Type of employment.
        applicantLocationRequirements:
          type: string
          nullable: true
          readOnly: true
          description: 'https://developers.google.com/search/docs/data-types/job-posting?hl=en#applicant-location-requirements'
        hiringOrganization:
          type: object
          nullable: true
          readOnly: true
          items:
            $ref: '#/components/schemas/Organization'
        baseSalary:
          type: object
          nullable: true
          readOnly: true
          items:
            $ref: '#/components/schemas/Salary'
        jobLocation:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Location'
        owner:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/User'
      xml:
        name: Job
    Place:
      type: object
      properties:
        streetAddress:
          type: string
        addressLocality:
          type: string
        addressRegion:
          type: string
        postalCode:
          type: string
        addressCountry:
          type: string
    Location:
      type: array
      items:
        $ref: '#/components/schemas/Place'
      description: |-
        The physical location(s) of the business where the employee will report to work (such as an office or worksite), not the location where the job was posted. Include as many fields as possible. The more properties you provide, the higher quality the job posting is to our users.
        https://schema.org/PostalAddress
    Salary:
      type: object
      properties:
        currency:
          type: string
    Organization:
      type: object
      properties:
        name:
          type: string
        sameAs:
          type: array
          items:
            type: string
        logo:
          type: string
          format: uri
      description: |-
        The organization offering the job position. This should be the name of the company (for example, “Starbucks, Inc”), and not the specific location that is hiring (for example, “Starbucks on Main Street”).
        https://schema.org/Organization
    SigninRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
