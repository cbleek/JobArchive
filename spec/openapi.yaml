openapi: 3.0.0
info:
  title: Job Archive
  description: >
    ## API for an archive of job postings.
    
    Job postings on the Internet contain wonderful data. Unfortunately, the data disappears after the runtime of a job posting. 
    But you can learn a lot from the data of job advertisements. Digital change will change the way we work together. So it would be great if you could use job postings to see how the demands on applicants are changing. Or in which direction the qualification requirements are going. And not just in the local area, but globally. 
    Large companies get this data, evaluate it and then offer results via API. But the data itself remains hidden for third-party evaluations. There are many tools for evaluating data. The know-how on how to use these tools is there. And the infrastructure to store large amounts of data is also there. This API should help to collect these Data.
  version: 0.0.1
  contact:
    name: API Support
    email: contact@yawik.org
    url: https://github.com/cbleek/JobArchive
  x-logo:
    url: 'https://raw.githubusercontent.com/cross-solution/YAWIK/develop/module/Core/public/images/logo.jpg'
    altText: Yawik logo
  license:
    name: MIT
    url: 'https://github.com/cbleek/JobArchive/blob/master/LICENSE'
servers:
  - url: 'https://api.yawik.org'
    description: Endpoint of the job archive api
  - url: 'http://localhost:8000'
    description: Test in localserver
tags:
  - name: auth
    description: Operations about auth
  - name: user
    description: Operations about user
  - name: job
    description: Operations about job
  - name: perm
    description: Operations about permissions
security:
  - bearerAuth: []
paths:
  /signup:
    post:
      tags:
        - auth
      summary: Create user
      description: 'User be able to sign up with password, email. After sign up backend will send token to email.'
      operationId: signupuser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              email: test@test.com
              password: secret
        required: true
      responses:
        '200':
          description: New user successfully created.
        '402':
          description: email is already in use.
      security: []
  /signin:
    post:
      tags:
        - auth
      summary: Sign in with email and password
      description: 'Signin creates a User Session. User be able to sign into the system and server will respond access-token, and this access-token should be stored in session. This access-token will be used to use other api. Backend will identify user using access-token.'
      operationId: signin
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequest'
            example:
              email: test@test.com
              password: test
        required: true
      responses:
        '200':
          description: successful operation
          headers:
            - $ref: '#/components/headers/X-Rate-Limit'
            - $ref: '#/components/headers/X-Expires-After'
          content:
            application/xml:
              schema:
                type: string
                example: Bearer 35775k6dehgn678865k87k748o233
            application/json:
              schema:
                type: string
                example: Bearer 35775k6dehgn678865k87k748o233
        '400':
          description: Invalid email/password supplied
        '404':
          $ref: '#/components/responses/NotFound':/user/{ref}:
        '422':
          description: email/password not supplied
      security: []
  /logout:
    get:
      tags:
        - auth
      summary: Logs out current logged in user
      description: 'Destoys a User Session.'
      operationId: logoutUser
      responses:
        '200':
          description: User successfully log out.
        default:
          $ref: '#/components/responses/Unauthorized'
  /validate/{token}:
    get:
      tags:
        - auth
      summary: confirm email address
      operationId: confirmemail
      parameters:
        - in: path
          name: token
          description: after signup, an email with a confirmation link is send to the user's email address. 
          required: true
          schema:
            type: string
          example:
            token: awevbbrntye2y53n5467xcvbn35u7mu3456
      responses:
        '200':
          description: Email address has been confirmed.
        '404':
          $ref: '#/components/responses/NotFound':/validate/{token}:
      security: []
  /user/list:
    get:
      summary: list user by reference
      tags:
        - user
      responses:
        '401':
          $ref: '#/components/responses/Unauthorized'
      security: []
  /user:
    get:
      tags:
        - user
      summary: Gets a user by ID.
      description: >
        A detailed description of the operation.
        Use markdown for rich text representation,
        such as **bold**, *italic*, and [links](https://swagger.io).
      operationId: getuser
      parameters:
        - $ref: '#/components/parameters/refInQuery'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                $ref: '#/components/examples/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      tags:
        - user
      summary: Update user profile
      description: An authenticated user be able to update information.
      operationId: updateuser
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              email: test@test.com
              password: test
        required: true
      responses:
        '200':
          description: User data successfully updated.
        default:
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - user
      summary: Delete user
      description: User be able to delete profile.
      operationId: deleteUser
      responses:
        '200':
          description: Your profile deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
  /job/list:
    get:
      tags:
        - job
      summary: Get Job lists
      description: An authenticated user be able to retrieve joblinks
      operationId: getjoblinks
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - in: query
          name: type
          schema:
            type: string
            enum:
              - all
              - mine
            default: mine
            example: all
          description: if type='all' user be able to retrieve all jobads but not 'all' user will retrieve his own posted jobads
      responses:
        '200':
          description: gets a list of job postings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobList'
              example:
                joblinks:
                  - {
                    ref:'5WiXXyCyW3qhuxgUJ1tw', 
                    url:'http://example.com/job1'}
                  - {
                    ref:'ADTcFEgwguKqXvGA41sK', 
                    url:'http://example.com/job2'}
          links:
            GetJobDetails:
              operationId: getJobDetail
              parameters:
                userId: '$response.body#/ref'
              description: >
                The `ref` value returned in the response can be used as
                the `userId` parameter in `GET /spi/job/{userId}`.
        '401':
          $ref: '#/components/responses/Unauthorized'
  /job/archive:
    post:
      tags:
        - job
      summary: Post a link
      description: sending an url to a job posting means to request a jobposting to be archived.
      operationId: addjoblink
      parameters:
        - in: query
          name: url
          required: true
          schema:
            type: string
            format: uri
        - in: query
          name: perm
          required: false
          schema:
            type: string
            format: uri
      responses:
        '200':
          description: Job link added successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
  /job/{ref}:
    get:
      tags:
        - job
      summary: get a job posting
      description: get details of a job posting
      operationId: getJobDetail
      parameters:
        - $ref: '#/components/parameters/refInPath'
      responses:
        '200':
          description: gets detail of a job posting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound':/job/{ref}:
    delete:
      tags:
       - job
      summary: delete a job posting
      description: get details of a job posting
      operationId: deleteJobPosting
      parameters:
        - $ref: '#/components/parameters/refInPath'
      responses:
        '200':
          description: gets detail of a job posting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '401':
          $ref: '#/components/responses/Unauthorized':/job/{ref}:
        '404':
          $ref: '#/components/responses/NotFound':/job/{ref}:
components:
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 100
        emailVerified:
          type: boolean
          nullable: true
      xml:
        name: User
    Job:
      type: object
      properties:
        url:
          type: string
          format: uri
          description: An url of an avtive job posting which can be downloaded.
        title:
          type: string
          readOnly: true
          nullable: true
          description: optional The title of the job (not the title of the posting). For example, "Software Engineer" or "Barista". For example.
        dateArchived:
          type: string
          readOnly: true
          nullable: true
          format: date-time
          description: optional start date of a job posting.        
        datePosted:
          type: string
          readOnly: true
          nullable: true
          format: date-time
          description: optional start date of a job posting.  
        validThrough:
          type: string
          nullable: true
          format: date-time
          description: optional end date of a job posting.
        description:
          type: string
          nullable: true
          readOnly: true
          description: optional description of a job posting.  
        employmentType:
          type: array
          nullable: true
          readOnly: true
          items:
            type: string
            enum:
              - "FULL_TIME"
              - "PART_TIME"
              - "CONTRACTOR"
              - "TEMPORARY"
              - "INTERN"
              - "VOLUNTEER"
              - "PER_DIEM"
              - "OTHER"
          description: Type of employment.
        applicantLocationRequirements:
          type: string
          nullable: true
          readOnly: true
          description: https://developers.google.com/search/docs/data-types/job-posting?hl=en#applicant-location-requirements
        hiringOrganization:
          type: object
          nullable: true
          readOnly: true
          items:
            $ref: '#/components/schemas/Organization'
        baseSalary:
          type: object
          nullable: true
          readOnly: true
          items:
            $ref: '#/components/schemas/Salary'
        jobLocation:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Location'
        owner:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/User'
      xml:
        name: Job
    JobList:
      type: array
      items:
        properties:
          id:
            type: string
          url:
            type: string
    Place:
      type: object
      properties:
        streetAddress:
          type: string
        addressLocality:
          type: string
        addressRegion:
          type: string
        postalCode:
          type: string
        addressCountry:
          type: string
    Location:
      type: array
      items:
        $ref: '#/components/schemas/Place'
      description: The physical location(s) of the business where the employee will report to work (such as an office or worksite), not the location where the job was posted. Include as many fields as possible. The more properties you provide, the higher quality the job posting is to our users.
      
        https://schema.org/PostalAddress
    Salary:
      type: object
      properties:
        currency:
          type: string
    Organization:
      type: object
      properties:
        name:
          type: string
        sameAs:
          type: array
          items:
            type: string
        logo:
          type: string
          format: uri
      description: 
        The organization offering the job position. This should be the name of the company (for example, “Starbucks, Inc”), and not the specific location that is hiring (for example, “Starbucks on Main Street”).
            
        https://schema.org/Organization
        
    SigninRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    # Schema for error response body
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
      example:
        code: 401
        message: Authorization failure
  examples:
    User:
      value: 'test'
  headers:
    X-Rate-Limit: # # Can be referenced as '#/components/headers/X-Rate-Limi'
      description: calls per hour allowed by the user
      schema:
        type: integer
        format: int32
    X-Expires-After:  # # Can be referenced as '#/components/headers/X-Expires-After'
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
  parameters:
    offset: # Can be referenced via '#/components/parameters/offset'
      name: o
      in: query
      description: Number of items to skip before returning the results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    limit: # Can be referenced as '#/components/parameters/limit'
      name: l
      in: query
      description: Maximum number of items to return.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
    refInPath: # Can be referenced as '#/components/parameters/refInPath'
      name: ref
      in: path
      description: Reference to a document
      required: true
      schema:
        type: string
        example: Yv9RO9JfAxxI3Wkyqweg
    refInQuery: # Can be referenced as '#/components/parameters/refInQuery'
      name: ref
      in: query
      description: Reference to a document
      required: false
      schema:
        type: string
        example: Yv9RO9JfAxxI3Wkyqweg
  responses:
    Success:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
